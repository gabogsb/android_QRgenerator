package co.gabogsb.qrcodegenerator


import android.graphics.Bitmap
import androidx.compose.foundation.Image
import androidx.compose.foundation.border
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.runtime.getValue
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.asImageBitmap
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.input.TextFieldValue
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import co.gabogsb.qrcodegenerator.ui.theme.PurpleGrey80
import co.gabogsb.qrcodegenerator.ui.theme.QRCodeGeneratorTheme
import com.google.zxing.BarcodeFormat
import com.google.zxing.qrcode.QRCodeWriter


@Composable
@OptIn(ExperimentalMaterial3Api::class)
fun QRCodeApp() {

    var textValue by remember { mutableStateOf(TextFieldValue("")) }
    var qrCodeGenerated by remember { mutableStateOf<Bitmap?>(null) }

    Column(
        horizontalAlignment = Alignment.CenterHorizontally,
        modifier = Modifier.padding(
            horizontal = 20.dp
        ),
        verticalArrangement = Arrangement.SpaceEvenly
    ) {

        Column(
            horizontalAlignment = Alignment.CenterHorizontally
        ) {

            Text(
                "Gerador de QRCode",
                textAlign = TextAlign.Center
            )

            Spacer(Modifier.height(10.dp))

            if (qrCodeGenerated != null) {
                Image(bitmap = qrCodeGenerated!!.asImageBitmap(),
                    contentDescription = null,
                    modifier = Modifier.size(220.dp)
                    )
            } else {
                Icon(
                    painter = painterResource(id = R.drawable.baseline_qr_code_scanner_24),
                    contentDescription = null,
                    modifier = Modifier.size(220.dp)
                )
            }


        }

        Column {
            TextField(
                modifier = Modifier.border(
                    width = 2.dp,
                    color = PurpleGrey80,
                    shape = RoundedCornerShape(10.dp)
                )
                    .fillMaxWidth(),
                placeholder = {
                    Text(
                        text = "Entre com o texto",
                        textAlign = TextAlign.Center,
                        modifier = Modifier.fillMaxWidth()
                    )
                },
                shape = RoundedCornerShape(10.dp),
                colors = TextFieldDefaults.textFieldColors(
                    containerColor = Color.White
                ),
                value = textValue,
                onValueChange = {
                    textValue = it
                })

            Spacer(Modifier.height(20.dp))

            roundedButton(
                onClick = {
                          qrCodeGenerated = generateQrCode(textValue.text)
                },
                enabled = textValue.text.isNotEmpty(),
                text = "Gerar QRCode",
                color = Color.Green
            )
        }


    }
}


@Composable
fun roundedButton(
    onClick: () -> Unit,
    enabled: Boolean,
    color: Color,
    text: String
) {
    Button(
        onClick = onClick,
        enabled = enabled,
        shape = RoundedCornerShape(10.dp),
        modifier = Modifier.fillMaxWidth(),
        colors = ButtonDefaults.buttonColors(
            containerColor = color, contentColor = Color.Black
        )
    ) {
        Text(
            text,
            modifier = Modifier.padding(vertical = 6.dp),
            color = Color.Black
        )
    }
}

fun generateQrCode(text: String): Bitmap {
    val matrix = QRCodeWriter().encode(text, BarcodeFormat.QR_CODE, 512, 512)
    val w = matrix.width
    val h = matrix.height

    val bitmap = Bitmap.createBitmap(w, h, Bitmap.Config.RGB_565)

    for (y in 0 until h) {
        for (x in 0 until w) {
           bitmap.setPixel(x, y, if (matrix.get(x, y))
               android.graphics.Color.BLACK
               else
                android.graphics.Color.WHITE
               )
        }
    }

    return bitmap
}

@Preview(showBackground = true)
@Composable
fun QRCodeAppPreview() {
    QRCodeGeneratorTheme(dynamicColor = false) {
        Surface(
            modifier = Modifier.fillMaxSize(),
            color = MaterialTheme.colorScheme.background
        ) {
            QRCodeApp()
        }
    }
}
